// <auto-generated />
using System;
using Autobusy.Models.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Autobusy.Models.Migrations
{
    [DbContext(typeof(AutobusyContext))]
    partial class AutobusyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Autobusy.Models.Autobus", b =>
                {
                    b.Property<int>("AutobusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AutobusId"), 1L, 1);

                    b.Property<DateTime>("DataProdukcji")
                        .HasColumnType("datetime2");

                    b.Property<string>("Marka")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumerRejestracyjny")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SpalanieNa100")
                        .HasColumnType("float");

                    b.Property<int>("StanAutobusu")
                        .HasColumnType("int");

                    b.HasKey("AutobusId");

                    b.ToTable("Autobusy");
                });

            modelBuilder.Entity("Autobusy.Models.Kierowca", b =>
                {
                    b.Property<int>("KierowcaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KierowcaId"), 1L, 1);

                    b.Property<int>("Doswiadczenie")
                        .HasColumnType("int");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KierowcaId");

                    b.ToTable("Kierowcy");
                });

            modelBuilder.Entity("Autobusy.Models.Kurs", b =>
                {
                    b.Property<int>("KursId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KursId"), 1L, 1);

                    b.Property<DateTime>("DzienOdbycia")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LiniaId")
                        .HasColumnType("int");

                    b.HasKey("KursId");

                    b.HasIndex("LiniaId");

                    b.ToTable("Kursy");
                });

            modelBuilder.Entity("Autobusy.Models.Linia", b =>
                {
                    b.Property<int>("LiniaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LiniaId"), 1L, 1);

                    b.Property<double>("DlugoscWKm")
                        .HasColumnType("float");

                    b.Property<string>("Numer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Typ")
                        .HasColumnType("int");

                    b.HasKey("LiniaId");

                    b.ToTable("Linie");
                });

            modelBuilder.Entity("Autobusy.Models.PlanKursu", b =>
                {
                    b.Property<int>("PlanKursuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlanKursuId"), 1L, 1);

                    b.Property<int>("KursId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PlanowaGodzina")
                        .HasColumnType("datetime2");

                    b.Property<int>("PrzystanekId")
                        .HasColumnType("int");

                    b.Property<int>("RealizacjaPrzejazduId")
                        .HasColumnType("int");

                    b.HasKey("PlanKursuId");

                    b.HasIndex("KursId");

                    b.HasIndex("PrzystanekId");

                    b.HasIndex("RealizacjaPrzejazduId")
                        .IsUnique();

                    b.ToTable("PlanyKursu");
                });

            modelBuilder.Entity("Autobusy.Models.Przejazd", b =>
                {
                    b.Property<int>("PrzejazdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrzejazdId"), 1L, 1);

                    b.Property<int>("AutobusId")
                        .HasColumnType("int");

                    b.Property<int>("IloscSkasowanychBiletow")
                        .HasColumnType("int");

                    b.Property<double>("IloscSpalonegoPaliwa")
                        .HasColumnType("float");

                    b.Property<int>("KierowcaId")
                        .HasColumnType("int");

                    b.Property<int>("KursId")
                        .HasColumnType("int");

                    b.HasKey("PrzejazdId");

                    b.HasIndex("AutobusId");

                    b.HasIndex("KierowcaId");

                    b.HasIndex("KursId");

                    b.ToTable("Przejazdy");
                });

            modelBuilder.Entity("Autobusy.Models.Przystanek", b =>
                {
                    b.Property<int>("PrzystanekId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrzystanekId"), 1L, 1);

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Numer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PrzystanekId");

                    b.ToTable("Przystanki");
                });

            modelBuilder.Entity("Autobusy.Models.PrzystanekWLinii", b =>
                {
                    b.Property<int>("PrzystanekWLiniiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrzystanekWLiniiId"), 1L, 1);

                    b.Property<int>("LiniaId")
                        .HasColumnType("int");

                    b.Property<int>("PrzystanekId")
                        .HasColumnType("int");

                    b.HasKey("PrzystanekWLiniiId");

                    b.HasIndex("LiniaId");

                    b.HasIndex("PrzystanekId");

                    b.ToTable("PrzystankiWLinii");
                });

            modelBuilder.Entity("Autobusy.Models.RealizacjaPrzejazdu", b =>
                {
                    b.Property<int>("RealizacjaPrzejazduId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RealizacjaPrzejazduId"), 1L, 1);

                    b.Property<DateTime>("FaktycznaGodzina")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlanKursuId")
                        .HasColumnType("int");

                    b.Property<int?>("PrzejazdId")
                        .HasColumnType("int");

                    b.HasKey("RealizacjaPrzejazduId");

                    b.HasIndex("PrzejazdId");

                    b.ToTable("RealizacjePrzejazdu");
                });

            modelBuilder.Entity("Autobusy.Models.Serwis", b =>
                {
                    b.Property<int>("SerwisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SerwisId"), 1L, 1);

                    b.Property<int>("AutobusId")
                        .HasColumnType("int");

                    b.Property<double>("Cena")
                        .HasColumnType("float");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Typ")
                        .HasColumnType("int");

                    b.HasKey("SerwisId");

                    b.HasIndex("AutobusId");

                    b.ToTable("Serwisy");
                });

            modelBuilder.Entity("Autobusy.Models.Kurs", b =>
                {
                    b.HasOne("Autobusy.Models.Linia", null)
                        .WithMany("Kursy")
                        .HasForeignKey("LiniaId");
                });

            modelBuilder.Entity("Autobusy.Models.PlanKursu", b =>
                {
                    b.HasOne("Autobusy.Models.Kurs", "Kurs")
                        .WithMany("PlanyKursu")
                        .HasForeignKey("KursId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Autobusy.Models.Przystanek", "Przystanek")
                        .WithMany()
                        .HasForeignKey("PrzystanekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Autobusy.Models.RealizacjaPrzejazdu", "RealizacjaPrzejazdu")
                        .WithOne("PlanKursu")
                        .HasForeignKey("Autobusy.Models.PlanKursu", "RealizacjaPrzejazduId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kurs");

                    b.Navigation("Przystanek");

                    b.Navigation("RealizacjaPrzejazdu");
                });

            modelBuilder.Entity("Autobusy.Models.Przejazd", b =>
                {
                    b.HasOne("Autobusy.Models.Autobus", "Autobus")
                        .WithMany()
                        .HasForeignKey("AutobusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Autobusy.Models.Kierowca", "Kierowca")
                        .WithMany("Przejazdy")
                        .HasForeignKey("KierowcaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Autobusy.Models.Kurs", "Kurs")
                        .WithMany("Przejazdy")
                        .HasForeignKey("KursId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autobus");

                    b.Navigation("Kierowca");

                    b.Navigation("Kurs");
                });

            modelBuilder.Entity("Autobusy.Models.PrzystanekWLinii", b =>
                {
                    b.HasOne("Autobusy.Models.Linia", "Linia")
                        .WithMany("Przystanki")
                        .HasForeignKey("LiniaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Autobusy.Models.Przystanek", "Przystanek")
                        .WithMany("Przystanki")
                        .HasForeignKey("PrzystanekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Linia");

                    b.Navigation("Przystanek");
                });

            modelBuilder.Entity("Autobusy.Models.RealizacjaPrzejazdu", b =>
                {
                    b.HasOne("Autobusy.Models.Przejazd", null)
                        .WithMany("Realizacje")
                        .HasForeignKey("PrzejazdId");
                });

            modelBuilder.Entity("Autobusy.Models.Serwis", b =>
                {
                    b.HasOne("Autobusy.Models.Autobus", "NaprawianyAutobus")
                        .WithMany("Serwisy")
                        .HasForeignKey("AutobusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NaprawianyAutobus");
                });

            modelBuilder.Entity("Autobusy.Models.Autobus", b =>
                {
                    b.Navigation("Serwisy");
                });

            modelBuilder.Entity("Autobusy.Models.Kierowca", b =>
                {
                    b.Navigation("Przejazdy");
                });

            modelBuilder.Entity("Autobusy.Models.Kurs", b =>
                {
                    b.Navigation("PlanyKursu");

                    b.Navigation("Przejazdy");
                });

            modelBuilder.Entity("Autobusy.Models.Linia", b =>
                {
                    b.Navigation("Kursy");

                    b.Navigation("Przystanki");
                });

            modelBuilder.Entity("Autobusy.Models.Przejazd", b =>
                {
                    b.Navigation("Realizacje");
                });

            modelBuilder.Entity("Autobusy.Models.Przystanek", b =>
                {
                    b.Navigation("Przystanki");
                });

            modelBuilder.Entity("Autobusy.Models.RealizacjaPrzejazdu", b =>
                {
                    b.Navigation("PlanKursu")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
